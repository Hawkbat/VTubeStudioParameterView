{"version":3,"sources":["utils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BufferedWebsocket","url","protocols","ws","_url","_protocols","bufferedSends","eventListeners","Map","reconnectHandle","reconnectTimeout","onopen","onmessage","onerror","onclose","this","performReconnect","v","protocol","readyState","binaryType","bufferedAmount","extensions","CLOSED","CLOSING","CONNECTING","OPEN","type","listener","options","listeners","get","push","set","addEventListener","index","findIndex","l","capture","splice","removeEventListener","event","dispatchEvent","code","reason","close","data","send","unshift","prev","next","WebSocket","reconnect","entries","ev","length","pop","e","console","error","clearTimeout","setTimeout","Math","min","max","round","n","App","useState","connected","setConnected","parameters","setParameters","useEffect","TOKEN_KEY","bus","WebSocketBus","client","ApiClient","initialToken","localStorage","getItem","undefined","plugin","Plugin","token","setItem","runToken","active","f","a","apiClient","live2DParameterList","modelLoaded","log","requestAnimationFrame","className","style","display","gridTemplateColumns","map","p","name","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.729c2b13.chunk.js","sourcesContent":["\r\nexport class BufferedWebsocket implements WebSocket {\r\n    ws!: WebSocket\r\n\r\n    private _url: string\r\n    private _protocols: string | string[] | undefined\r\n    private bufferedSends: (string | ArrayBufferLike | Blob | ArrayBufferView)[] = []\r\n    private eventListeners: Map<string, { listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions }[]> = new Map()\r\n    private reconnectHandle: any | null = null\r\n    private reconnectTimeout = 0\r\n\r\n    get url() { return this._url }\r\n    set url(v: string) {\r\n        if (v !== this._url) {\r\n            this._url = v\r\n            this.performReconnect()\r\n        }\r\n    }\r\n\r\n    get protocol(): string { return this.ws.protocol }\r\n    get readyState(): number { return this.ws.readyState }\r\n\r\n    get binaryType(): BinaryType { return this.ws.binaryType }\r\n    set binaryType(binaryType: BinaryType) { this.ws.binaryType = binaryType }\r\n    get bufferedAmount(): number { return this.ws.bufferedAmount }\r\n    get extensions(): string { return this.ws.extensions }\r\n\r\n    get CLOSED(): number { return this.ws.CLOSED }\r\n    get CLOSING(): number { return this.ws.CLOSING }\r\n    get CONNECTING(): number { return this.ws.CONNECTING }\r\n    get OPEN(): number { return this.ws.OPEN }\r\n\r\n    constructor(url: string, protocols?: string | string[]) {\r\n        this._url = url\r\n        this._protocols = protocols\r\n        this.performReconnect()\r\n    }\r\n\r\n    onopen: ((this: WebSocket, ev: Event) => any) | null = null\r\n    onmessage: ((this: WebSocket, ev: MessageEvent<any>) => any) | null = null\r\n    onerror: ((this: WebSocket, ev: Event) => any) | null = null\r\n    onclose: ((this: WebSocket, ev: CloseEvent) => any) | null = null\r\n\r\n    addEventListener<K extends keyof WebSocketEventMap>(type: K, listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void\r\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void {\r\n        const listeners = this.eventListeners.get(type) ?? []\r\n        listeners.push({ listener, options })\r\n        this.eventListeners.set(type, listeners)\r\n        this.ws.addEventListener(type, listener, options)\r\n    }\r\n\r\n    removeEventListener<K extends keyof WebSocketEventMap>(type: K, listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any, options?: boolean | EventListenerOptions): void\r\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void\r\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void {\r\n        const listeners = this.eventListeners.get(type) ?? []\r\n        const index = listeners.findIndex(l => l.listener === listener && (l.options === options || (typeof l.options === 'object' && typeof options === 'object' && l.options.capture === options.capture)))\r\n        if (index >= 0) listeners.splice(index, 1)\r\n        this.ws.removeEventListener(type, listener, options)\r\n    }\r\n\r\n    dispatchEvent(event: Event): boolean {\r\n        return this.ws.dispatchEvent(event)\r\n    }\r\n\r\n    close(code?: number, reason?: string): void {\r\n        this.ws.close(code, reason)\r\n    }\r\n\r\n    send(data: string | ArrayBufferLike | Blob | ArrayBufferView): void {\r\n        if (this.ws.readyState === this.ws.OPEN) {\r\n            this.ws.send(data)\r\n        } else {\r\n            this.bufferedSends.unshift(data)\r\n        }\r\n    }\r\n\r\n    private performReconnect() {\r\n        try {\r\n            const prev: WebSocket | undefined = this.ws\r\n            if (prev && prev.readyState === prev.OPEN) prev.close(3012, 'Reconnecting')\r\n\r\n            // Terrible hack to guarantee that the first websocket will always be instantiated successfully\r\n            const next = new WebSocket(prev ? this._url : 'wss://echo.websocket.org', this._protocols)\r\n\r\n            next.binaryType = prev?.binaryType ?? next.binaryType\r\n            next.onopen = prev?.onopen ?? next.onopen\r\n            next.onmessage = prev?.onmessage ?? next.onmessage\r\n            next.onerror = prev?.onerror ?? next.onerror\r\n            next.onclose = prev?.onclose ?? next.onclose\r\n\r\n            this.ws = next\r\n            if (!prev) this.reconnect()\r\n\r\n            for (const [type, listeners] of this.eventListeners.entries()) {\r\n                for (const listener of listeners) {\r\n                    if (prev) prev.removeEventListener(type, listener.listener, listener.options)\r\n                    next.addEventListener(type, listener.listener, listener.options)\r\n                }\r\n            }\r\n            next.addEventListener('open', ev => {\r\n                if (next !== this.ws) {\r\n                    next.close(3012, 'Reconnecting')\r\n                    return\r\n                }\r\n                this.reconnectTimeout = 0\r\n                this.onopen?.(ev)\r\n                while (this.bufferedSends.length) next.send(this.bufferedSends.pop()!)\r\n            })\r\n            next.addEventListener('message', ev => {\r\n                this.onmessage?.(ev)\r\n            })\r\n            next.addEventListener('error', ev => {\r\n                this.onerror?.(ev)\r\n            })\r\n            next.addEventListener('close', ev => {\r\n                this.onclose?.(ev)\r\n                if (next === this.ws) {\r\n                    this.reconnect()\r\n                }\r\n            })\r\n        } catch (e) {\r\n            console.error(e)\r\n            this.reconnect()\r\n        }\r\n    }\r\n\r\n    reconnect() {\r\n        if (this.reconnectHandle) {\r\n            clearTimeout(this.reconnectHandle)\r\n            this.reconnectHandle = null\r\n        }\r\n        this.reconnectHandle = setTimeout(() => this.performReconnect(), this.reconnectTimeout)\r\n        this.reconnectTimeout = Math.min(8000, Math.max(1000, this.reconnectTimeout) * 2)\r\n    }\r\n}\r\n","import React, { Fragment, useEffect, useState } from 'react'\nimport './App.css'\nimport { ApiClient, ILive2DParameter, Plugin, WebSocketBus } from 'vtubestudio'\nimport { BufferedWebsocket } from './utils'\n\nfunction round(n: number): number {\n  return Math.round(n * 1000) / 1000\n}\n\nfunction App() {\n  const [connected, setConnected] = useState(false)\n  const [parameters, setParameters] = useState<ILive2DParameter[] | null>()\n\n  useEffect(() => {\n    const TOKEN_KEY = 'vtstudio-parameter-view-token'\n    const ws = new BufferedWebsocket('ws://localhost:8001')\n    const bus = new WebSocketBus(ws)\n    const client = new ApiClient(bus)\n    const initialToken = localStorage.getItem(TOKEN_KEY) ?? undefined\n    const plugin = new Plugin(client, 'Parameter View', 'Hawkbar', undefined, initialToken, token => localStorage.setItem(TOKEN_KEY, token))\n    const runToken = { active: true }\n\n    ws.addEventListener('open', () => setConnected(true))\n    ws.addEventListener('close', () => setConnected(false))\n\n    const f = async () => {\n      try {\n        const { modelLoaded, parameters } = await plugin.apiClient.live2DParameterList()\n        setParameters(modelLoaded ? parameters : null)\n      } catch (e) {\n        console.log(e)\n      }\n      requestAnimationFrame(f)\n    }\n\n    f()\n\n    return () => {\n      runToken.active = false\n    }\n  }, [])\n\n  return (\n    <div className=\"App\">\n      {connected ? <div style={{ display: 'grid', gridTemplateColumns: 'auto 60px 1fr 60px 60px' }}>\n        {parameters ? parameters.map(p => <Fragment key={p.name}>\n          <div>{p.name}</div>\n          <div>{round(p.min)}</div>\n          <input type=\"range\" min={p.min} max={p.max} value={round(p.value)} />\n          <div>{round(p.max)}</div>\n          <div>{round(p.value)}</div>\n        </Fragment>) : <i>No model loaded.</i>}\n      </div> : <i>Not connected to VTube Studio.</i>\n      }\n    </div >\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}